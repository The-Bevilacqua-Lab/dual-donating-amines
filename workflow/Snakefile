import csv

configfile: "config/config.yaml"

# compile the list of equivalence classes based on the representative set file
eq_class_list = []
with open(config["rep_set_file"], mode='r') as rep_set_file:
    for line in csv.reader(rep_set_file):
        eq_class_list.append(line[0])

rule all:
    input:
        expand("data/modified_mmCIF_files/{eq_class}.cif", eq_class=eq_class_list),
        expand("data/b_factor_data/{eq_class}_b_factor_data.csv", eq_class=eq_class_list),
        expand("data/nuc_data/{eq_class}_nuc_data.csv", eq_class=eq_class_list),
        expand("data/hbond_data/{eq_class}_hbond_data.csv", eq_class=eq_class_list)

rule parse_nrlist:
    input:
        config["rep_set_file"]
    output:
        "data/eq_class_files/{eq_class}_info.csv"
    log:
        stdout = "data/logs/parse_nrlist/{eq_class}.stdout",
        stderr = "data/logs/parse_nrlist/{eq_class}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/parse_nrlist.py"

rule collect_data:
    input:
        rules.parse_nrlist.output
    output:
        modified_mmcif = "data/modified_mmCIF_files/{eq_class}.cif",
        b_factor = "data/b_factor_data/{eq_class}_b_factor_data.csv",
        nuc = "data/nuc_data/{eq_class}_nuc_data.csv",
        hbond = "data/hbond_data/{eq_class}_hbond_data.csv"
    log:
        stdout = "data/logs/collect_data/{eq_class}.stdout",
        stderr = "data/logs/collect_data/{eq_class}.stderr"
    benchmark:
        "data/benchmark/{eq_class}.tsv"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"
