import scripts.parse_nrlist

configfile: "config/config.yaml"

# Prepare a list of strings where each string includes the equivalence class name, PDB ID, and chain info for the
# equivalence class members.
eq_class_members = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"], config["all_members"])

rule all:
    input:
        "analysis/atom_pairs.csv",
        "analysis/counts.csv"

rule collect_data:
    output:
        data = "data/collect_data/{eq_class_members}.csv"
    log:
        stdout = "misc/logs/collect_data/{eq_class_members}.stdout",
        stderr = "misc/logs/collect_data/{eq_class_members}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"

rule process_data:
    input:
        data = "data/collect_data/{eq_class_members}.csv"
    output:
        counts = "processed/counts/{eq_class_members}_counts.csv",
        h_bond = "processed/h_bond/{eq_class_members}_h_bond.csv",
        nuc = "processed/nuc/{eq_class_members}_nuc.csv",
        b_factor = "processed/b_factor/{eq_class_members}_b_factor.csv"
    log:
        stdout = "misc/logs/process_data/{eq_class_members}.stdout",
        stderr = "misc/logs/process_data/{eq_class_members}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/process_data.py"

rule combine_data:
    input:
        counts = expand("processed/counts/{eq_class_members}_counts.csv", eq_class_members=eq_class_members),
        h_bond = expand("processed/h_bond/{eq_class_members}_h_bond.csv", eq_class_members=eq_class_members),
        nuc = expand("processed/nuc/{eq_class_members}_nuc.csv", eq_class_members=eq_class_members),
        b_factor = expand("processed/b_factor/{eq_class_members}_b_factor.csv", eq_class_members=eq_class_members)
    output:
        counts = "combined/counts.csv",
        h_bond = "combined/h_bond.csv",
        nuc = "combined/nuc.csv",
        b_factor = "combined/b_factor.csv"
    log:
        stdout = "misc/logs/combine_data/output.stdout",
        stderr = "misc/logs/combine_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/combine_data.py"

rule analyze_data:
    input:
        counts = "combined/counts.csv",
        h_bond = "combined/h_bond.csv",
        nuc = "combined/nuc.csv",
        b_factor = "combined/b_factor.csv"
    output:
        atom_pairs = "analysis/atom_pairs.csv",
        counts = "analysis/counts.csv"
    log:
        stdout = "misc/logs/analyze_data/output.stdout",
        stderr = "misc/logs/analyze_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/analyze_data.py"
