import scripts.parse_nrlist

configfile: "config/config.yaml"

# Retrieve information from each equivalence class listed in the representative set file.
eq_class_dict = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"], config["all_members"])

# Prepare a list including the equivalence class name, PDB ID, model info, and chain info for each equivalence class
# member.
eq_class_members = []
for eq_class in eq_class_dict.values():
    for member in eq_class:
        eq_class_members.append(member)

rule all:
    input:
        expand("data/b_factor/{eq_class_members}_b_factor.csv", eq_class_members=eq_class_members),
        expand("data/nuc/{eq_class_members}_nuc.csv", eq_class_members=eq_class_members),
        expand("data/h_bond/{eq_class_members}_h_bond.csv", eq_class_members=eq_class_members)

rule write_eq_class_files:
    output:
        "data/eq_class_members_files/{eq_class_members}_info.csv"
    log:
        stdout = "data/logs/write_eq_class_files/{eq_class_members}.stdout",
        stderr = "data/logs/write_eq_class_files/{eq_class_members}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/write_eq_class_files.py"

rule collect_data:
    input:
        rules.write_eq_class_files.output
    output:
        b_factor = "data/b_factor/{eq_class_members}_b_factor.csv",
        nuc = "data/nuc/{eq_class_members}_nuc.csv",
        h_bond = "data/h_bond/{eq_class_members}_h_bond.csv"
    log:
        stdout = "data/logs/collect_data/{eq_class_members}.stdout",
        stderr = "data/logs/collect_data/{eq_class_members}.stderr"
    benchmark:
        "data/benchmark/{eq_class_members}.tsv"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"
