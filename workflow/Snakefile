import scripts.parse_nrlist

configfile: "config/config.yaml"

# Prepare a list of strings where each string includes the equivalence class name, PDB ID, and chain info for the
# equivalence class members.
eq_class_members = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"], config["all_members"])

rule all:
    input:
        "results/review_candidates/candidates.py",
        "results/review_amines/amines.py",
        "results/plots/pairs.png",
        "results/plots/density.png",
        "results/plots/nuc_id.png",
        "results/plots/acc_id.png",
        "results/plots/chi_partial.png",
        "results/plots/chi_partial_y.png",
        "results/plots/chi_combined.png",
        "results/plots/dist.png"

rule collect_data:
    output:
        data = "results/collect_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/collect_data/{eq_class_member}.stdout",
        stderr = "results/logs/collect_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"

rule process_data:
    input:
        data = "results/collect_data/{eq_class_member}.csv"
    output:
        data = "results/process_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/process_data/{eq_class_member}.stdout",
        stderr = "results/logs/process_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/process_data.py"

rule review_amines:
    input:
        data = expand("results/process_data/{eq_class_member}.csv", eq_class_member=eq_class_members)
    output:
        script = "results/review_amines/amines.py"
    log:
        stdout = "results/logs/review_amines/output.stdout",
        stderr = "results/logs/review_amines/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/review_amines.py"

rule identify_candidates:
    input:
        data = expand("results/process_data/{eq_class_member}.csv", eq_class_member=eq_class_members)
    output:
        candidates = "results/identify_candidates/candidates.csv"
    log:
        stdout = "results/logs/identify_candidates/output.stdout",
        stderr = "results/logs/identify_candidates/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/identify_candidates.py"

rule review_candidates:
    input:
        candidates = "results/identify_candidates/candidates.csv"
    output:
        script = "results/review_candidates/candidates.py"
    log:
        stdout = "results/logs/review_candidates/output.stdout",
        stderr = "results/logs/review_candidates/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/review_candidates.py"

rule combine_data:
    input:
        data = expand("results/process_data/{eq_class_member}.csv", eq_class_member=eq_class_members)
    output:
        combined = "results/combine_data/combined.csv",
        distances = "results/combine_data/distances.csv"
    log:
        stdout = "results/logs/combine_data/output.stdout",
        stderr = "results/logs/combine_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/combine_data.py"

rule create_plots:
    input:
        combined = "results/combine_data/combined.csv",
        distances = "results/combine_data/distances.csv"
    output:
        pairs = "results/plots/pairs.png",
        pseudotorsion = "results/plots/pseudotorsion.png",
        density = "results/plots/density.png",
        nuc_id = "results/plots/nuc_id.png",
        acc_id = "results/plots/acc_id.png",
        chi_partial = "results/plots/chi_partial.png",
        chi_partial_y = "results/plots/chi_partial_y.png",
        chi_combined = "results/plots/chi_combined.png",
        dist = "results/plots/dist.png"
    script:
        "scripts/create_plots.R"
