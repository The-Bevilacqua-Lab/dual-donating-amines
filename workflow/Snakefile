import scripts.parse_nrlist

configfile: "config/config.yaml"

# Prepare a list of strings where each string includes the equivalence class name, PDB ID, and chain info for the
# equivalence class members.
eq_class_members = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"])

# Define the pseudo-torsion locations for clustering.
pt_grps = ['location_1', 'location_2']

rule all:
    input:
        "results/plots/pairs.png",
        "results/plots/pt.png",
        "results/tables/location_1_residues.csv",
        "results/tables/location_2_residues.csv",
        "results/tables/pt_acc_pairs.csv",
        "results/plots/don_id.png",
        "results/plots/acc_pair_id.png",
        "results/tables/acc_pair_id.csv",
        "results/plots/sasa_box.png",
        "results/plots/sasa_jitter.png",
        "results/plots/sasa_col.png",
        "results/tables/sasa_stats.csv",
        "results/plots/density.png",
        "results/plots/density_no_outiers.png",
        "results/tables/density_stats.csv",
        "results/p-values/density_pvals.csv",
        "results/plots/chi_full.png",
        "results/plots/chi_partial_combined.png",
        "results/tables/location_1_frag_info.csv",
        "results/tables/location_2_frag_info.csv",
        "results/tables/chi_stats.csv",
        "results/p-values/chi_pvals.csv",
        "results/acc_pair_examples/acc_pair_5A.csv",
        "results/acc_pair_examples/acc_pair_5B_1.csv",
        "results/acc_pair_examples/acc_pair_5B_2.csv",
        "results/acc_pair_examples/acc_pair_5B_3.csv",
        "results/acc_pair_examples/acc_pair_5B_4.csv",
        "results/acc_pair_examples/acc_pair_5C.csv",
        "results/acc_pair_examples/acc_pair_5D.csv",
        "results/acc_pair_examples/acc_pair_5E.csv",
        "results/acc_pair_examples/acc_pair_5F.csv",
        "results/acc_pair_examples/acc_pair_S3A.csv",
        "results/acc_pair_examples/acc_pair_S3B.csv",
        expand("results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff_normalized.png", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff.csv", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_all_against_all_RMSD.csv", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_all_structure_dendrogram.png", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_alignment_n_clustering_results.csv", pt_grps=pt_grps)

rule collect_data:
    output:
        data = "results/collect_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/collect_data/{eq_class_member}.stdout",
        stderr = "results/logs/collect_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"

rule process_data:
    input:
        data = "results/collect_data/{eq_class_member}.csv"
    output:
        data = "results/process_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/process_data/{eq_class_member}.stdout",
        stderr = "results/logs/process_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/process_data.py"

rule combine_data:
    input:
        data = expand("results/process_data/{eq_class_member}.csv", eq_class_member=eq_class_members)
    output:
        combined = "results/combine_data/combined.csv"
    log:
        stdout = "results/logs/combine_data/output.stdout",
        stderr = "results/logs/combine_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/combine_data.py"

rule create_plots:
    input:
        combined = "results/combine_data/combined.csv"
    output:
        pairs = "results/plots/pairs.png",
        pt = "results/plots/pt.png",
        location_1_residues = "results/tables/location_1_residues.csv",
        location_2_residues= "results/tables/location_2_residues.csv",
        pt_acc_pairs = "results/tables/pt_acc_pairs.csv",
        don_id = "results/plots/don_id.png",
        acc_pair_id = "results/plots/acc_pair_id.png",
        acc_pair_id_csv = "results/tables/acc_pair_id.csv",
        sasa_box = "results/plots/sasa_box.png",
        sasa_jitter = "results/plots/sasa_jitter.png",
        sasa_col = "results/plots/sasa_col.png",
        sasa_stats = "results/tables/sasa_stats.csv",
        sasa_pvals = "results/p-values/sasa_pvals.csv",
        density = "results/plots/density.png",
        density_no_outiers = "results/plots/density_no_outiers.png",
        density_stats = "results/tables/density_stats.csv",
        density_pvals = "results/p-values/density_pvals.csv",
        chi_full = "results/plots/chi_full.png",
        chi_partial_combined = "results/plots/chi_partial_combined.png",
        chi_stats = "results/tables/chi_stats.csv",
        chi_pvals = "results/p-values/chi_pvals.csv"
    conda:
        "envs/general.yaml"
    script:
        "scripts/create_plots.R"

rule pt_loc_info:
    input:
        location_1_residues = "results/tables/location_1_residues.csv",
        location_2_residues= "results/tables/location_2_residues.csv"
    output:
        location_1_frag_info = "results/tables/location_1_frag_info.csv",
        location_2_frag_info = "results/tables/location_2_frag_info.csv"
    log:
        stdout = "results/logs/pt_loc_info/output.stdout",
        stderr = "results/logs/pt_loc_info/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/pt_loc_info.py"

rule list_examples:
    input:
        combined = "results/combine_data/combined.csv"
    output:
        acc_pair_5A = "results/acc_pair_examples/acc_pair_5A.csv",
        acc_pair_5B_1 = "results/acc_pair_examples/acc_pair_5B_1.csv",
        acc_pair_5B_2 = "results/acc_pair_examples/acc_pair_5B_2.csv",
        acc_pair_5B_3 = "results/acc_pair_examples/acc_pair_5B_3.csv",
        acc_pair_5B_4 = "results/acc_pair_examples/acc_pair_5B_4.csv",
        acc_pair_5C = "results/acc_pair_examples/acc_pair_5C.csv",
        acc_pair_5D = "results/acc_pair_examples/acc_pair_5D.csv",
        acc_pair_5E = "results/acc_pair_examples/acc_pair_5E.csv",
        acc_pair_5F = "results/acc_pair_examples/acc_pair_5F.csv",
        acc_pair_S3A = "results/acc_pair_examples/acc_pair_S3A.csv",
        acc_pair_S3B = "results/acc_pair_examples/acc_pair_S3B.csv",
        pt_location_1 = "results/acc_pair_examples/pt_location_1.csv",
        pt_location_2 = "results/acc_pair_examples/pt_location_2.csv",
        pt_neighbors = "results/acc_pair_examples/pt_neighbors.csv"
    conda:
        "envs/general.yaml"
    script:
        "scripts/acc_pair_examples.R"

rule id_rep_struct:
    input:
        frag_info = "results/tables/{pt_grps}_frag_info.csv"
    output:
        val_score_plt = "results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff_normalized.png",
        val_score_csv = "results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff.csv",
        rmsd = "results/alignment_clustering/{pt_grps}_all_against_all_RMSD.csv",
        dendrogram = "results/alignment_clustering/{pt_grps}_all_structure_dendrogram.png",
        align_clust_results = "results/alignment_clustering/{pt_grps}_alignment_n_clustering_results.csv"
    log:
        stdout = "results/logs/id_rep_struct/output.stdout",
        stderr = "results/logs/id_rep_struct/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/id_rep_struct.py"
