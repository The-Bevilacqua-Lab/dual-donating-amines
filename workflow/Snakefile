import scripts.parse_nrlist

configfile: "config/config.yaml"

# Prepare a list of strings where each string includes the equivalence class name, PDB ID, and chain info for the
# equivalence class members.
eq_class_members = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"], config["all_members"])

rule all:
    input:
        "results/plots/pairs.png",
        "results/plots/pt_1.png",
        "results/plots/pt_2.png",
        "results/plots/don_id.png",
        "results/plots/acc_pair_id.png",
        "results/tables/acc_pair_id.csv",
        "results/plots/sasa_box.png",
        "results/plots/sasa_col.png",
        "results/tables/sasa_stats.csv",
        "results/plots/density_all.png",
        "results/plots/density_filtered.png",
        "results/tables/density_stats.csv",
        "results/plots/full_plots.png",
        "results/plots/partial_plots_combined.png",
        "results/tables/pt_acc_pairs.csv"

rule collect_data:
    output:
        data = "results/collect_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/collect_data/{eq_class_member}.stdout",
        stderr = "results/logs/collect_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"

rule process_data:
    input:
        data = "results/collect_data/{eq_class_member}.csv"
    output:
        data = "results/process_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/process_data/{eq_class_member}.stdout",
        stderr = "results/logs/process_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/process_data.py"

rule combine_data:
    input:
        data = expand("results/process_data/{eq_class_member}.csv", eq_class_member=eq_class_members)
    output:
        combined = "results/combine_data/combined.csv"
    log:
        stdout = "results/logs/combine_data/output.stdout",
        stderr = "results/logs/combine_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/combine_data.py"

rule create_plots:
    input:
        combined = "results/combine_data/combined.csv"
    output:
        pairs = "results/plots/pairs.png",
        pt_1 = "results/plots/pt_1.png",
        pt_2 = "results/plots/pt_2.png",
        don_id = "results/plots/don_id.png",
        acc_pair_id = "results/plots/acc_pair_id.png",
        acc_pair_id_csv = "results/tables/acc_pair_id.csv",
        sasa_box = "results/plots/sasa_box.png",
        sasa_col = "results/plots/sasa_col.png",
        sasa_stats = "results/tables/sasa_stats.csv",
        density_all = "results/plots/density_all.png",
        density_filtered = "results/plots/density_filtered.png",
        density_stats = "results/tables/density_stats.csv",
        full_plots = "results/plots/full_plots.png",
        partial_plots_combined = "results/plots/partial_plots_combined.png",
        pt_acc_pairs = "results/tables/pt_acc_pairs.csv"
    conda:
        "envs/general.yaml"
    script:
        "scripts/create_plots.R"
