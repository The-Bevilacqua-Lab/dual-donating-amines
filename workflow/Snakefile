import scripts.parse_nrlist

configfile: "config/config.yaml"

# Prepare a list of strings where each string includes the equivalence class name, PDB ID, and chain info for the
# equivalence class members.
eq_class_members = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"])

# Define the pseudo-torsion locations for clustering.
pt_grps = ['location_1', 'location_2']

rule all:
    input:
        "results/plots/Fig_2_pairs.png",
        "results/plots/Fig_7_pt.png",
        "results/tables/location_1_residues.csv",
        "results/tables/location_2_residues.csv",
        "results/tables/Fig_7_pt_acc_pairs.csv",
        "results/plots/Fig_3_don_id.png",
        "results/plots/Fig_3_acc_pair_id.png",
        "results/tables/acc_pair_id.csv",
        "results/plots/Fig_S2_sasa_box.png",
        "results/plots/Fig_S2_sasa_jitter.png",
        "results/plots/Fig_5_sasa_col.png",
        "results/tables/sasa_stats.csv",
        "results/p-values/sasa_pvals.csv",
        "results/p-values/sasa_pvals.txt",
        "results/plots/Fig_S2_density.png",
        "results/plots/Fig_5_density_no_outiers.png",
        "results/tables/density_stats.csv",
        "results/p-values/density_pvals.csv",
        "results/p-values/density_pvals.txt",
        "results/plots/Fig_S3_chi_full.png",
        "results/plots/Fig_6_chi_combined.png",
        "results/plots/Fig_6_chi_partial.png",
        "results/tables/chi_stats.csv",
        "results/p-values/chi_pvals.txt",
        "results/tables/location_1_frag_info.csv",
        "results/tables/location_2_frag_info.csv",
        "results/acc_pair_examples/Supplemental_Data_S1.csv",
        "results/acc_pair_examples/Supplemental_Data_S2.csv",
        "results/acc_pair_examples/Supplemental_Data_S3.csv",
        "results/acc_pair_examples/Supplemental_Data_S4.csv",
        "results/acc_pair_examples/Supplemental_Data_S5.csv",
        "results/acc_pair_examples/Supplemental_Data_S6.csv",
        "results/acc_pair_examples/Supplemental_Data_S7.csv",
        "results/acc_pair_examples/Supplemental_Data_S8.csv",
        "results/acc_pair_examples/Supplemental_Data_S9.csv",
        "results/acc_pair_examples/Supplemental_Data_S10.csv",
        "results/acc_pair_examples/Supplemental_Data_S11.csv",
        "results/acc_pair_examples/Supplemental_Data_S12.csv",
        "results/acc_pair_examples/Supplemental_Data_S13.csv",
        "results/acc_pair_examples/Supplemental_Data_S14.csv",
        expand("results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff_normalized.png", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff.csv", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_all_against_all_RMSD.csv", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_all_structure_dendrogram.png", pt_grps=pt_grps),
        expand("results/alignment_clustering/{pt_grps}_alignment_n_clustering_results.csv", pt_grps=pt_grps)

rule collect_data:
    output:
        data = "results/collect_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/collect_data/{eq_class_member}.stdout",
        stderr = "results/logs/collect_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"

rule process_data:
    input:
        data = "results/collect_data/{eq_class_member}.csv"
    output:
        data = "results/process_data/{eq_class_member}.csv"
    log:
        stdout = "results/logs/process_data/{eq_class_member}.stdout",
        stderr = "results/logs/process_data/{eq_class_member}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/process_data.py"

rule combine_data:
    input:
        data = expand("results/process_data/{eq_class_member}.csv", eq_class_member=eq_class_members)
    output:
        combined = "results/combine_data/combined.csv"
    log:
        stdout = "results/logs/combine_data/output.stdout",
        stderr = "results/logs/combine_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/combine_data.py"

rule create_plots:
    input:
        combined = "results/combine_data/combined.csv"
    output:
        fig_2_pairs = "results/plots/Fig_2_pairs.png",
        fig_7_pt = "results/plots/Fig_7_pt.png",
        location_1_residues = "results/tables/location_1_residues.csv",
        location_2_residues = "results/tables/location_2_residues.csv",
        fig_7_pt_acc_pairs = "results/tables/Fig_7_pt_acc_pairs.csv",
        fig_3_don_id = "results/plots/Fig_3_don_id.png",
        fig_3_acc_pair_id = "results/plots/Fig_3_acc_pair_id.png",
        acc_pair_id_csv = "results/tables/acc_pair_id.csv",
        fig_S2_sasa_box = "results/plots/Fig_S2_sasa_box.png",
        fig_S2_sasa_jitter = "results/plots/Fig_S2_sasa_jitter.png",
        fig_5_sasa_col = "results/plots/Fig_5_sasa_col.png",
        sasa_stats = "results/tables/sasa_stats.csv",
        sasa_pvals = "results/p-values/sasa_pvals.csv",
        sasa_pvals_txt = "results/p-values/sasa_pvals.txt",
        fig_S2_density = "results/plots/Fig_S2_density.png",
        fig_5_density_no_outiers = "results/plots/Fig_5_density_no_outiers.png",
        density_stats = "results/tables/density_stats.csv",
        density_pvals = "results/p-values/density_pvals.csv",
        density_pvals_txt = "results/p-values/density_pvals.txt",
        fig_S3_chi_full = "results/plots/Fig_S3_chi_full.png",
        fig_6_chi_combined = "results/plots/Fig_6_chi_combined.png",
        fig_6_chi_partial = "results/plots/Fig_6_chi_partial.png",
        chi_stats = "results/tables/chi_stats.csv",
        chi_pvals = "results/p-values/chi_pvals.txt"
    conda:
        "envs/general.yaml"
    script:
        "scripts/create_plots.R"

rule pt_loc_info:
    input:
        location_1_residues = "results/tables/location_1_residues.csv",
        location_2_residues= "results/tables/location_2_residues.csv"
    output:
        location_1_frag_info = "results/tables/location_1_frag_info.csv",
        location_2_frag_info = "results/tables/location_2_frag_info.csv"
    log:
        stdout = "results/logs/pt_loc_info/output.stdout",
        stderr = "results/logs/pt_loc_info/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/pt_loc_info.py"

rule list_examples:
    input:
        combined = "results/combine_data/combined.csv"
    output:
        supplemental_data_S1 = "results/acc_pair_examples/Supplemental_Data_S1.csv",
        supplemental_data_S2 = "results/acc_pair_examples/Supplemental_Data_S2.csv",
        supplemental_data_S3 = "results/acc_pair_examples/Supplemental_Data_S3.csv",
        supplemental_data_S4 = "results/acc_pair_examples/Supplemental_Data_S4.csv",
        supplemental_data_S5 = "results/acc_pair_examples/Supplemental_Data_S5.csv",
        supplemental_data_S6 = "results/acc_pair_examples/Supplemental_Data_S6.csv",
        supplemental_data_S7 = "results/acc_pair_examples/Supplemental_Data_S7.csv",
        supplemental_data_S8 = "results/acc_pair_examples/Supplemental_Data_S8.csv",
        supplemental_data_S9 = "results/acc_pair_examples/Supplemental_Data_S9.csv",
        supplemental_data_S10 = "results/acc_pair_examples/Supplemental_Data_S10.csv",
        supplemental_data_S11 = "results/acc_pair_examples/Supplemental_Data_S11.csv",
        supplemental_data_S12 = "results/acc_pair_examples/Supplemental_Data_S12.csv",
        supplemental_data_S13 = "results/acc_pair_examples/Supplemental_Data_S13.csv",
        supplemental_data_S14 = "results/acc_pair_examples/Supplemental_Data_S14.csv"
    conda:
        "envs/general.yaml"
    script:
        "scripts/acc_pair_examples.R"

rule id_rep_struct:
    input:
        frag_info = "results/tables/{pt_grps}_frag_info.csv"
    output:
        val_score_plt = "results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff_normalized.png",
        val_score_csv = "results/alignment_clustering/{pt_grps}_val_score_vs_RMSD_cutoff.csv",
        rmsd = "results/alignment_clustering/{pt_grps}_all_against_all_RMSD.csv",
        dendrogram = "results/alignment_clustering/{pt_grps}_all_structure_dendrogram.png",
        align_clust_results = "results/alignment_clustering/{pt_grps}_alignment_n_clustering_results.csv"
    log:
        stdout = "results/logs/id_rep_struct/{pt_grps}.stdout",
        stderr = "results/logs/id_rep_struct/{pt_grps}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/id_rep_struct.py"
