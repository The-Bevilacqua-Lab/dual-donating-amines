import sys
import scripts.parse_nrlist

configfile: "config/config.yaml"

# Retrieve information from each equivalence class listed in the representative set file.
eq_class_dict = scripts.parse_nrlist.parse_nrlist(config["rep_set_file"], config["all_members"])

# Prepare a list including the equivalence class name, PDB ID, and chain info for each equivalence class member.
eq_class_members = []
for eq_class in eq_class_dict:
    if not (len(eq_class_dict[eq_class]['PDB_ID']) == len(eq_class_dict[eq_class]['model']) ==
            len(eq_class_dict[eq_class]['chain_list'])):
        print(f"Error: There is an issue with the information for a member of equivalence class {eq_class} in the "
              f"Snakefile.")
        sys.exit(1)
    for idx in range(len(eq_class_dict[eq_class]['PDB_ID'])):
        eq_class_members.append(f'{eq_class}_{eq_class_dict[eq_class]["PDB_ID"][idx]}')
        for chain in eq_class_dict[eq_class]["chain_list"][idx]:
            eq_class_members[-1] = eq_class_members[-1] + "_" + chain

rule all:
    input:
        "combined/h_bond.csv",
        "combined/nuc.csv",
        "combined/b_factor.csv",
        "combined/don_h_bonds.csv"

rule write_eq_class_files:
    output:
        "data/eq_class_members_files/{eq_class_members}_info.csv"
    log:
        stdout = "data/logs/write_eq_class_files/{eq_class_members}.stdout",
        stderr = "data/logs/write_eq_class_files/{eq_class_members}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/write_eq_class_files.py"

rule collect_data:
    input:
        rules.write_eq_class_files.output
    output:
        h_bond = "data/h_bond/{eq_class_members}_h_bond.csv",
        nuc = "data/nuc/{eq_class_members}_nuc.csv",
        b_factor = "data/b_factor/{eq_class_members}_b_factor.csv"
    log:
        stdout = "data/logs/collect_data/{eq_class_members}.stdout",
        stderr = "data/logs/collect_data/{eq_class_members}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/collect_data.py"

rule process_data:
    input:
        h_bond = "data/h_bond/{eq_class_members}_h_bond.csv",
        nuc = "data/nuc/{eq_class_members}_nuc.csv",
        b_factor = "data/b_factor/{eq_class_members}_b_factor.csv",
        eq_class_members = "data/eq_class_members_files/{eq_class_members}_info.csv"
    output:
        h_bond = "processed/h_bond/{eq_class_members}_h_bond.csv",
        nuc = "processed/nuc/{eq_class_members}_nuc.csv",
        b_factor = "processed/b_factor/{eq_class_members}_b_factor.csv",
        don_h_bonds = "processed/don_h_bonds/{eq_class_members}_don_h_bonds.csv"
    log:
        stdout = "data/logs/process_data/{eq_class_members}.stdout",
        stderr = "data/logs/process_data/{eq_class_members}.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/process_data.py"

rule combine_data:
    input:
        h_bond = expand("processed/h_bond/{eq_class_members}_h_bond.csv", eq_class_members=eq_class_members),
        nuc = expand("processed/nuc/{eq_class_members}_nuc.csv", eq_class_members=eq_class_members),
        b_factor = expand("processed/b_factor/{eq_class_members}_b_factor.csv", eq_class_members=eq_class_members),
        don_h_bonds = expand("processed/don_h_bonds/{eq_class_members}_don_h_bonds.csv", eq_class_members=eq_class_members)
    output:
        h_bond = "combined/h_bond.csv",
        nuc = "combined/nuc.csv",
        b_factor = "combined/b_factor.csv",
        don_h_bonds = "combined/don_h_bonds.csv"
    log:
        stdout = "data/logs/combine_data/output.stdout",
        stderr = "data/logs/combine_data/error.stderr"
    conda:
        "envs/general.yaml"
    script:
        "scripts/combine_data.py"
